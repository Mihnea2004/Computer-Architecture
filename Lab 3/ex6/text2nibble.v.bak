module text2nibble (
  input [7:0] i,   // Intrare: caracter ASCII (8 bi?i)
  output reg [3:0] o // Ie?ire: nibble (4 bi?i)
);

  always @(*) begin
    o = 15; // Valoare implicit? pentru caractere invalide

    // Compara?ie pentru fiecare caracter numeric ('0' - '9')
    if (i == 8'b00110000) // '0' (ASCII 48)
      o = 0;
    else if (i == 8'b00110001) // '1' (ASCII 49)
      o = 1;
    else if (i == 8'b00110010) // '2' (ASCII 50)
      o = 2;
    else if (i == 8'b00110011) // '3' (ASCII 51)
      o = 3;
    else if (i == 8'b00110100) // '4' (ASCII 52)
      o = 4;
    else if (i == 8'b00110101) // '5' (ASCII 53)
      o = 5;
    else if (i == 8'b00110110) // '6' (ASCII 54)
      o = 6;
    else if (i == 8'b00110111) // '7' (ASCII 55)
      o = 7;
    else if (i == 8'b00111000) // '8' (ASCII 56)
      o = 8;
    else if (i == 8'b00111001) // '9' (ASCII 57)
      o = 9;
    else
      o = 15; // Dac? nu este un caracter valid, set?m la 15
  end
endmodule

module text2nibble_tb;
  reg [7:0] i;
  wire [3:0] o;

  text2nibble text2nibble_i (.i(i), .o(o));

  integer k;
  initial begin
    $display("Time\ti\ti_chr\to");
    $monitor("%0t\t%b\t%c\t%b(%d)", $time, i, i, o, o);
    i = 0;
    for (k = 1; k < 256; k = k + 1)
      #10 i = k;
  end
endmodule